@page "/"
@inject HttpClient http;
@inject IJSRuntime jsRuntime;
@inject NavigationManager navigation;
@using FrontNet.Common.Models;

<h1>Blazor Survey</h1>

@if (isReady)
{
    <p>Question @currentQuestionNo / @questionsCount</p>
    <p>@currentQuestion.Question</p>

    <span>Poor</span>
    @for (int i = 1; i <= 6; i++)
    {
        <label>
            <input type="radio" name="score"
                   checked="@(currentResponse.Score == i)"
                   value="@(i)"
                   @onchange="@((args) => Score(int.Parse(args.Value.ToString())))"/>
        </label>
    }
    <span>Excellent</span>

    <div>
        <div class="mt-2">
            @if (canPrev)
            {
                <button class="btn btn-primary" @onclick="PrevQuestion">Prev</button>
            }
            @if (canNext)
            {
                <button class="btn btn-primary" @onclick="NextQuestion">Next</button>
            }
        </div>
        @if (canSubmit)
        {
            <EditForm Model="response" OnValidSubmit="Submit">
                <div class="mt-3">
                    <InputTextArea placeholder="Additional comment (not required)" @bind-Value="response.AdditionalComment" />
                </div>
                <div class="mt-2">
                    <InputText placeholder="Author (not required)" @bind-Value="response.Author" />
                </div>
                <div class="mt-2">
                    <button class="btn btn-primary">Submit</button>
                </div>
            </EditForm>
        }
    </div>
}
else 
{
    <div class="d-flex justify-content-center align-items-center">
        <div class="spinner-border text-info" style="width: 5rem; height: 5rem;" role="status">
            <span class="sr-only">Fetching questions...</span>
        </div>
    </div>
}

@code {
    private bool isReady;
    private IReadOnlyList<SurveyQuestion> survey;
    private IReadOnlyList<SurveyQuestionResponse> responses;
    private SurveyResponse response = new SurveyResponse();

    private int currentQuestionNo => currentQuestionIndex + 1;
    private int currentQuestionIndex;
    private int questionsCount => survey.Count;

    private SurveyQuestion currentQuestion => survey[currentQuestionIndex];
    private SurveyQuestionResponse currentResponse => responses[currentQuestionIndex];

    protected override async Task OnInitializedAsync()
    {
        survey = await http.GetFromJsonAsync<IReadOnlyList<SurveyQuestion>>("https://blazor-dashboard.azurewebsites.net/api/survey");
        responses = survey.Select(x => new SurveyQuestionResponse
        {
            QuestionId = x.Id,
        }).ToList();
        isReady = true;
    }

    private void PrevQuestion() => currentQuestionIndex--;
    private void NextQuestion() => currentQuestionIndex++;

    private bool canPrev => currentQuestionNo > 1;
    private bool canNext => currentQuestionNo < questionsCount;
    private bool canSubmit => currentQuestionNo == questionsCount && responses.Last().Score > 0;

    private void Score(int score)
    {
        currentResponse.Score = score;
    }

    private async Task Submit()
    {
        if (responses.Any(x => x.Score == 0))
        {
            await jsRuntime.InvokeVoidAsync("alert", "Please answer all questions");
        }
        else
        {
            response.QuestionResponses = responses;
            await http.PostAsJsonAsync("https://blazor-dashboard.azurewebsites.net/api/survey", response);
            navigation.NavigateTo("/thank-you");
        }
    }
}
