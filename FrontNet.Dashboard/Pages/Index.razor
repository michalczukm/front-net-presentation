@page "/"

@using FrontNet.Dashboard.Models;

@inject IJSRuntime JSRuntime;
@inject SurveysService surveysService;

@if (isReady)
{
    <button @onclick="() => UpdateCharts()">Press</button>
    <div class="dashboard">
        @foreach (var questionReport in surveyReport.QuestionsReports)
        {
            <canvas id="@(getQuestionCanvasId(questionReport))"></canvas>
        }
    </div>
}

@code {
    private SurveyReport surveyReport;
    private bool isReady => surveyReport != null;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CreateCharts();
        }
    }

    private string getQuestionCanvasId(SurveyQuestionReport report) => $"question-chart-{report.QuestionId}";

    private async void CreateCharts() 
    {
        surveyReport = await surveysService.GetReport();
        StateHasChanged();

        foreach (var questionReport in surveyReport.QuestionsReports)
            {
                await JSRuntime.InvokeVoidAsync("FrontNetJS.charts.createChart", 
                $"#{getQuestionCanvasId(questionReport)}",
                "pie",
                new {
                    Title = questionReport.QuestionText,
                    Data = questionReport.Responses.Select(response => response.Value),
                    Labels = questionReport.Responses.Select(response => response.Answer)
                });
            }
    }

    private async void UpdateCharts() 
    {
        surveyReport = await surveysService.GetReport();

        foreach (var questionReport in surveyReport.QuestionsReports)
            {
                await JSRuntime.InvokeVoidAsync("FrontNetJS.charts.updateChart", 
                    $"#{getQuestionCanvasId(questionReport)}",
                    questionReport.Responses.Select(response => response.Value)
                );
            }
            
        StateHasChanged();
    }
}