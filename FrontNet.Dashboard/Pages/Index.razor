@page "/"

@using FrontNet.Dashboard.Models;

@inject IJSRuntime JSRuntime;
@inject SurveysService surveysService;

@if (isReady)
{
    <div class="dashboard">
        @foreach (var questionReport in surveyReport.QuestionsReports)
        {
            <canvas id="@(getQuestionCanvasId(questionReport))"></canvas>
        }
    </div>
}

@code {
    private SurveyReport surveyReport;
    private bool isReady => surveyReport != null;
    private bool shouldFetchReports = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CreateCharts();

            await Task.Run(async () =>
            {
                while (shouldFetchReports)
                {
                    await Task.Delay(1000);
                    await UpdateCharts();
                    InvokeAsync(() => StateHasChanged());
                }
            });
        }
    }

    public void Dispose()
    {
        shouldFetchReports = false;
    }

    private string getQuestionCanvasId(SurveyQuestionReport report) => $"question-chart-{report.QuestionId}";

    private async Task CreateCharts()
    {
        surveyReport = await surveysService.GetReport();
        StateHasChanged();

        foreach (var questionReport in surveyReport.QuestionsReports)
        {
            await JSRuntime.InvokeVoidAsync("FrontNetJS.charts.createChart",
            $"#{getQuestionCanvasId(questionReport)}",
            "pie",
            new
            {
                Title = questionReport.QuestionText,
                Data = questionReport.Responses.Select(response => response.Value),
                Labels = questionReport.Responses.Select(response => response.Answer)
            });
        }
    }

    private async Task UpdateCharts()
    {
        surveyReport = await surveysService.GetReport();

        foreach (var questionReport in surveyReport.QuestionsReports)
        {
            await JSRuntime.InvokeVoidAsync("FrontNetJS.charts.updateChart",
                $"#{getQuestionCanvasId(questionReport)}",
                questionReport.Responses.Select(response => response.Value)
            );
        }
    }
}
